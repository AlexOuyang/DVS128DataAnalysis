function [eps,unwrappedTimes]=measureActivity(sampleSizeEvents,filename);
% [eps,t]=measureActivity(sampleSizeEvents[,filename])
% Returns the rate of spike activity in events per second (eps) as a function of
% time (t). sampleSizeEvents specifies the number of events to average over; sampleSizeEvents
% defaults to 1024. If filename is not specified then a dialog is opened.
% A plot is generated by default.
% unwrappedTimes are the event times in seconds, assuming timestamp tick of
% 1e-6 seconds

useDeltaTime=1; % set to 1 to use total time over sample instead of average of instantaneous event rate

path='';

if nargin==0,
    sampleSizeEvents=1024;
end

if nargin<2,
    [filename,path,filterindex]=uigetfile('*.dat','Select recorded AER data file');
    if filename==0, return; end
end
if nargin==1,
    path='';
    filename=file;
end


f=fopen([path,filename],'r');
% skip header lines
bof=ftell(f);
line=native2unicode(fgets(f));
tok='#!AER-DAT';
version=0;

while line(1)=='#',
    if strncmp(line,tok, length(tok))==1,
        version=sscanf(line(length(tok)+1:end),'%f');
    end
    fprintf('%s\n',line(1:end-2)); % print line using \n for newline, discarding CRLF written by java under windows
    bof=ftell(f);
    line=native2unicode(fgets(f)); % gets the line including line ending chars
end

switch version,
    case 0
        fprintf('No #!AER-DAT version header found, assuming 16 bit addresses\n');
        version=1;
    case 1
        fprintf('Addresses are 16 bit\n');
    case 2
        fprintf('Addresses are 32 bit\n');
    otherwise
        fprintf('Unknown file version %g',version);
end

numBytesPerEvent=6;
switch(version)
    case 1
        numBytesPerEvent=6;
        addressSize=2;
    case 2
        numBytesPerEvent=8;
        addressSize=4;
end

        
fseek(f,0,'eof');
numEvents=floor((ftell(f)-bof)/numBytesPerEvent); % 6 bytes/event
eventSize=numBytesPerEvent;

fprintf('Total of %d events\n',numEvents);

nSamples=floor(numEvents/sampleSizeEvents);
eps=zeros(1,nSamples);
wrappedTimes=eps;
unwrappedTimes=wrappedTimes;
% unwrap big timestamp wraps
wrapCounter=0;
wrapAdd=(1e-6)*(2^32);

fprintf('reading %d samples of length %d events\n',nSamples,sampleSizeEvents);

fseek(f,0,'bof');
for i=1:nSamples,
    pos=i*sampleSizeEvents*eventSize;
    %     fseek(f,pos,'bof');
    %     addr=int16(fread(f,sampleSizeEvents,'int16',4,'b'));
    fseek(f,addressSize+pos,'bof');
    ts=int32(fread(f,sampleSizeEvents,'int32',addressSize,'b')); % read sampleSize int32 timestamps, skipping the interposed addresses
    wrappedTimes(i)=1e-6*double(ts(end)); % times are the last event time in sample
    if i>1 && wrappedTimes(i)<wrappedTimes(i-1),
        fprintf('w'); % indicates timestamp wrap
        wrapCounter=wrapCounter+1;
    end
    unwrappedTimes(i)=wrappedTimes(i)+wrapCounter*wrapAdd;
    if i>1,
        dt=unwrappedTimes(i)-unwrappedTimes(i-1);
    else
        dt=(1e-6*(double(ts(end)-ts(1))));
    end
    if dt==0,
        warning('zero dt');
        continue;
    end
    eps(i)=sampleSizeEvents/dt;
    fprintf('.'); % print this for every sampleSize events
    if rem(i,90)==0, fprintf('\n'); end; % wrap the printing of . or w
end
fclose(f);

medianEps=median(eps);
totalTime=unwrappedTimes(end)-unwrappedTimes(1);
meanEps=numEvents/totalTime;


fprintf('\n\nmeanEps=%.2f, medianEps=%.2f\n',meanEps,medianEps);

if 1, %nargout==0,
    figure(1);
%     subplot(211);
    plot(unwrappedTimes,eps)
    xlabel 'time (s)'
    ylabel 'event rate (eps)'
    figure(2);
%     subplot(212);
    plot(1:length(unwrappedTimes),unwrappedTimes,1:length(wrappedTimes),wrappedTimes);
    ylabel 'time (s)'
    xlabel 'sample'
    figure(3);
    hist(eps,100);
    xlabel 'spike rate (Hz)'
    ylabel(['frequency per ' int2str(sampleSizeEvents) ' event packets']);
end

% evalin('

return;

