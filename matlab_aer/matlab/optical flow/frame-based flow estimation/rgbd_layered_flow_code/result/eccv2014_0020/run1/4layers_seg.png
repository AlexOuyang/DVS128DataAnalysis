      % determine intersection point of w2,w3 with edge inters1
                t1 = -wb2(inters1)/(wb3(inters1)-wb2(inters1));
                cb1 = wb2 + t1*(wb3-wb2);
                if min(cb1) >= -tol % check if cb1 lies inside the triangle
                    % determine intersection point of w2,w3 with edge inters2
                    t2 = -wb2(inters2)/(wb3(inters2)-wb2(inters2));
                    cb2 = wb2 + t2*(wb3-wb2);
                    c1 = cb1(1)*v1 + cb1(2)*v2 + cb1(3)*v3;
                    c2 = cb2(1)*v1 + cb2(2)*v2 + cb2(3)*v3;
                    zz = z(inters2,1)*v1 + z(inters2,2)*v2 + z(inters2,3)*v3;
                    yy = y(inters1,1)*v1 + y(inters1,2)*v2 + y(inters1,3)*v3;
                    polygons(i).Polygon = [w1;yy;c1;c2;zz];
                    polygons(i).Elem = intersec.Elems(i);
                else
                    midvert = setdiff([1 2 3], [inters1 inters2]); % determine the middle node
                    midcoord = v(midvert,:);
                    zz = z(inters2,1)*v1 + z(inters2,2)*v2 + z(inters2,3)*v3;
                    yy = y(inters1,1)*v1 + y(inters1,2)*v2 + y(inters1,3)*v3;
                    polygons(i).Polygon = [w1;zz;midcoord;yy];
                    polygons(i).Elem = intersec.Elems(i);
                end
            end
        end

        % all coordinates are outside the triangle
        if ~oneflag && ~twoflag
            flag1 = 0; flag2 = 0; flag3 = 0;

            % compute intersection of w1,w2 with the three edges of elem
            t1 = -wb1(1)/(wb2(1)-wb1(1));
            t2 = -wb1(2)/(wb2(2)-wb1(2));
            t3 = -wb1(3)/(wb2(3)-wb1(3));
            y(1,:) = wb1 + t1*(wb2-wb1); % intersection with v2,v3
            y(2,:) = wb1 + t2*(wb2-wb1); % intersection with v1,v3
            y(3,:) = wb1 + t3*(wb2-wb1); % intersection with v1,v2
            t = [t1 t2 t3];

            loc3 = (t>0) + (t<1);
            loc3 = find(loc3 == 2);

            if length(loc3) == 2 && min(min(y(loc3,:))) >= -tol % two intersections
                flag1 = 1;
            elseif length(loc3) == 3 % 3 intersections
                loc3 = [];
                if min(y(1,:)) >= -tol
                    loc3 = [loc3 1];
                end
                if min(y(2,:)) >= -tol
                    loc3 = [loc3 2];
                end
                if min(y(3,:)) >= -tol
                    loc3 = [loc3 3];
                end
                if length(loc3)==2
                    flag1=1;
                end
            end

            % compute intersection of w1,w3 with the three edges of elem
            s1 = -wb1(1)/(wb3(1)-wb1(1));
            s2 = -wb1(2)/(wb3(2)-wb1(2));
            s3 = -wb1(3)/(wb3(3)-wb1(3));
            z(1,:) = wb1 + s1*(wb3-wb1); % intersection with v2,v3
            z(2,:) = wb1 + s2*(wb3-wb1); % intersection with v1,v3
            z(3,:) = wb1 + s3*(wb3-wb1); % intersection with v1,v2
            s = [s1 s2 s3];

            loc2 = (s>0) + (s<1);
            loc2 = find(loc2 == 2);


            if length(loc2) == 2 && min(min(z(loc2,:))) >= -tol % two intersections
                flag2 = 1;
            elseif length(loc2) == 3 % 3 intersections
                loc2 = [];
                if min(z(1,:)) >= -tol
                    loc2 = [loc2 1];
                end
                if min(z(2,:)) >= -tol
                    loc2 = [loc2 2];
                end
                if min(z(3,:)) >= -tol
                    loc2 = [loc2 3];
                end
                if length(loc2)==2
                    flag2=1;
                end
            end

            % compute intersection of w2,w3 with the three edges of elem
            r1 = -wb2(1)/(wb3(1)-wb2(1));
            r2 = -wb2(2)/(wb3(2)-wb2(2));
            r3 = -wb2(3)/(wb3(3)-wb2(3));
            x(1,:) = wb2 + r1*(wb3-wb2); % intersection with v2,v3
            x(2,:) = wb2 + r2*(wb3-wb2); % intersection with v1,v3
            x(3,:) = wb2 + r3*(wb3-wb2); % intersection with v1,v2
            r = [r1 r2 r3];

            loc1 = (r>0) + (r<1);
            loc1 = find(loc1 == 2);

            if length(loc1) >= 2 && min(min(x(loc1,:))) >= -tol % two intersections
                flag3 = 1; % 3 intersections
            elseif length(loc1) == 3
                loc1 = [];
                if min(x(1,:)) >= -tol
                    loc1 = [loc1 1];
                end
                if min(x(2,:)) >= -tol
                    loc1 = [loc1 2];
                end
                if min(x(3,:)) >= -tol
                    loc1 = [loc1 3];
                end
                if length(loc1)==2
                    flag3=1;
                end
            end

            flag = [flag1,flag2,flag3]; % check which of the vertices intersects
            if sum(flag) == 1 % one edge intersects the original triangle
                nr = find(flag == 1);
                % find the barycentric coordinates of v1,v2,v3 wrt wi
                matr2 = [w1-w3; w2-w3]';
                vb1 = matr2\(v1-w3)';
                vb2 = matr2\(v2-w3)';
                vb3 = matr2\(v3-w3)';
                vvb(1,:) = [vb1' 1-sum(vb1)];
                vvb(2,:) = [vb2' 1-sum(vb2)];
                vvb(3,:) = [vb3' 1-sum(vb3)];
                if nr == 1
                    loc = loc3;
                    vertnr = setdiff([1 2 3], loc);
                    yy1 = y(loc(1),1)*v1 + y(loc(1),2)*v2 + y(loc(1),3)*v3;
                    yy2 = y(loc(2),1)*v1 + y(loc(2),2)*v2 + y(loc(2),3)*v3;
                    if vvb(vertnr,3) > -tol
                        polygons(i).Polygon = [yy1;yy2;v(vertnr,:)];
                        polygons(i).Elem = intersec.Elems(i);
                    else
                        polygons(i).Polygon = [yy1;yy2;v(loc(1),:);v(loc(2),:)];
                        polygons(i).Elem = intersec.Elems(i);
                    end
                elseif nr == 2
                    loc = loc2;
                    vertnr = setdiff([1 2 3], loc);
                    zz1 = z(loc(1),1)*v1 + z(loc(1),2)*v2 + z(loc(1),3)*v3;
                    zz2 = z(loc(2),1)*v1 + z(loc(2),2)*v2 + z(loc(2),3)*v3;
                    if vvb(vertnr,2) > -tol
                        polygons(i).Polygon = [zz1;zz2;v(vertnr,:)];
                        polygons(i).Elem = intersec.Elems(i);
                    else
                        polygons(i).Polygon = [zz1;zz2;v(loc(1),:);v(loc(2),:)];
                        polygons(i).Elem = intersec.Elems(i);
                    end
                elseif nr == 3
                    loc =loc1;
                    vertnr = setdiff([1 2 3], loc);
                    xx1 = x(loc(1),1)*v1 + x(loc(1),2)*v2 + x(loc(1),3)*v3;
                    xx2 = x(loc(2),1)*v1 + x(loc(2),2)*v2 + x(loc(2),3)*v3;
                    if vvb(vertnr,1) > -tol
                        polygons(i).Polygon = [xx1;xx2;v(vertnr,:)];
                        polygons(i).Elem = intersec.Elems(i);
             